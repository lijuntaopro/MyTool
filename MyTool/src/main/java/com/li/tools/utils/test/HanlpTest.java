package com.li.tools.utils.test;

import java.util.List;

import org.junit.Test;

import com.hankcs.hanlp.HanLP;
import com.hankcs.hanlp.dictionary.CoreSynonymDictionary;
import com.hankcs.hanlp.suggest.Suggester;

public class HanlpTest {
	
	/**
	 * 
	 * author lijuntao
	 * date 2017年11月6日
	 */
	@Test
	public void test(){
		String text = "算法工程师\n" +
	            "算法（Algorithm）是一系列解决问题的清晰指令，也就是说，能够对一定规范的输入，在有限时间内获得所要求的输出。如果一个算法有缺陷，或不适合于某个问题，执行这个算法将不会解决这个问题。不同的算法可能用不同的时间、空间或效率来完成同样的任务。一个算法的优劣可以用空间复杂度与时间复杂度来衡量。算法工程师就是利用算法处理事物的人。\n" +
	            "\n" +
	            "1职位简介\n" +
	            "算法工程师是一个非常高端的职位；\n" +
	            "专业要求：计算机、电子、通信、数学等相关专业；\n" +
	            "学历要求：本科及其以上的学历，大多数是硕士学历及其以上；\n" +
	            "语言要求：英语要求是熟练，基本上能阅读国外专业书刊；\n" +
	            "必须掌握计算机相关知识，熟练使用仿真工具MATLAB等，必须会一门编程语言。\n" +
	            "\n" +
	            "2研究方向\n" +
	            "视频算法工程师、图像处理算法工程师、音频算法工程师 通信基带算法工程师\n" +
	            "\n" +
	            "3目前国内外状况\n" +
	            "目前国内从事算法研究的工程师不少，但是高级算法工程师却很少，是一个非常紧缺的专业工程师。算法工程师根据研究领域来分主要有音频/视频算法处理、图像技术方面的二维信息算法处理和通信物理层、雷达信号处理、生物医学信号处理等领域的一维信息算法处理。\n" +
	            "在计算机音视频和图形图像技术等二维信息算法处理方面目前比较先进的视频处理算法：机器视觉成为此类算法研究的核心；另外还有2D转3D算法(2D-to-3D conversion)，去隔行算法(de-interlacing)，运动估计运动补偿算法(Motion estimation/Motion Compensation)，去噪算法(Noise Reduction)，缩放算法(scaling)，锐化处理算法(Sharpness)，超分辨率算法(Super Resolution),手势识别(gesture recognition),人脸识别(face recognition)。\n" +
	            "在通信物理层等一维信息领域目前常用的算法：无线领域的RRM、RTT，传送领域的调制解调、信道均衡、信号检测、网络优化、信号分解等。\n" +
	            "另外数据挖掘、互联网搜索算法也成为当今的热门方向。\n" +
	            "算法工程师逐渐往人工智能方向发展。";
	List<String> phraseList = HanLP.extractPhrase(text, 10);
	System.out.println(phraseList);
	}
	
	@Test
	public void test2(){
		String text = "乡愁是一份沉重的爱。离开故土的游子，默默将爱收藏在心底。在异乡打拼，心里异常孤独，对着城市的钢筋水泥，"
				+ "对着那些永远都不可能与之说心里话的人，心中充满惆怅。在寂寞的时候，对着荷塘月色，想起故乡的袅袅炊烟，"
				+ "想起脸上堆满皱纹的阿爸阿妈，想起故乡的那条清澈的小河，想起儿时的玩伴，心中不由泛起甜蜜而酸涩的"
				+ "涟漪。"
				+ "乡愁是一份深沉的爱。想起余光中的一首诗：小时候"
						+ "乡愁是一枚小小的邮票//我在这头//母亲在那头//长大后//乡愁"
						+ "是一张窄窄的船票 我在这头//新娘在那头//后来啊//乡愁是一方矮矮的坟墓//我在"
						+ "外头//母亲啊在里头//而现在//乡愁是一湾浅浅的海峡//我在这头//大陆"
						+ "在那头。乡愁，承载着游子多少牵挂，多少痴缠的情感，多少浓烈的"
						+ "爱意，多少望穿秋水的期盼。"
						+ "对母亲的牵挂，是乡愁中最浓烈的爱。想起母亲年轻时那"
						+ "乌黑的长发，发中飘散着游子熟悉的发香。小时候，游子时常依偎在母"
						+ "亲的怀中，听母亲讲河神的故事。对游子来说，母亲就是那条小河，有着清澈的眼睛，有着"
						+ "丰盈的乳汁，有着对自己细水长流爱。母爱如水，他如河旁的小草。从"
						+ "小到大，那条母亲河源源不断地滋润着他，陪伴他成长。"
						+ "对父亲的牵挂，是乡愁中最深沉的爱。父亲，往往不苟言笑。在游"
						+ "子眼中，看得最多的往往是父亲伟岸的背影。父亲的背影，像山一"
						+ "样高大挺拔。小时候，常常趴在父亲的背上，感受父亲背上的温暖。父爱如"
						+ "山，他默默的守护着母亲，守护着游子，守护着这个暖意融融的家。父亲的"
						+ "背影，永远铭刻在游子的心里，无论岁月怎么侵蚀他的记忆，那熟悉的背影永远刻骨铭心。"
				+ "对爷爷的牵挂，是乡愁中最和蔼可亲的爱。除了父母，爷爷便是占据游子"
						+ "记忆的亲人。爷爷满头白发，皱纹堆满了额头，总是抽着水烟，"
						+ "抽烟时发出“吧嗒”“吧嗒”的响声。爷爷经常在河边钓鱼，游子总是坐在爷爷身边，看爷爷聚"
						+ "精会神的等鱼上钩。最开心的，莫过于爷爷钓了一大篮子的鱼，这些小鱼便是游子最丰盛的晚餐。"
				+ "对奶奶的牵挂，是乡愁中最温柔的爱。奶奶有一头整齐的而柔顺的白"
						+ "发，天庭饱满，温柔善良。奶奶善于织布，纳鞋。奶奶织的衣服是"
						+ "这个世界上最合身的衣服，奶奶纳的鞋是世上最结实的鞋。游子对奶奶有一种特殊的情感。奶奶"
						+ "最疼的人就是他。奶奶的笑容，如天上的太阳，总是那样灿烂。奶奶的笑，融化在游子心底，每当他不开心的时候，奶奶的笑便是他的创可贴。"
				+ "对妻子的牵挂，是乡愁中最柔软的爱。妻子温柔似"
						+ "水，温婉贤惠。妻子的笑容，是这个世上最温暖美丽的笑容。妻子有一双会说话的大眼睛，皮肤白皙。她的"
						+ "笑容，像花一样绽放在游子心底。妻子的声音，甜美动人，游子最喜欢听她唱歌。妻子做"
						+ "得一手好菜，游子最喜欢吃她做的凉拌面条和麻婆豆腐。来到这个城"
						+ "市，每当孤独的时候，妻子的音容笑貌总是出现在他的脑海中。"
				+ "对女儿的牵挂，是乡愁中最亲切的爱。女儿长得像红苹果，小脸红扑扑的"
						+ "，说话奶声奶气。每当游子回乡，第一个出来迎接的总是他可爱的女儿。女儿年纪虽小，但很"
						+ "贴心懂事。每当游子回乡，她会给游子准备好刮胡须的刀，端上一杯暖暖的水，用盆装好"
						+ "热水，帮游子洗脚，吃饭的时候，会夹最好吃的菜给游子。女儿的可爱乖巧，是远在他乡打工的游子最大的安慰。"
				+ "对故土的牵挂，是乡愁中最难割舍的爱。山里的河，是如此丰盈清澈，小时候，游子时常在河里游泳，"
						+ "时常在河里嬉戏玩耍；山河里的泉水，是那样清甜可口；山里的春天，是那样生机勃勃，是那样"
						+ "姹紫嫣红；山里的夏天，阳光明媚，鸟语花香；山里的秋天，是丰收的季节；山里的冬"
						+ "天，虽然下着大雪，可是那一株株寒梅，让游子心里又对下一年充满希望。"
				+ "乡愁，是一种难以言说的爱，是一种复杂的情感，是一种对故土和亲人浓浓的"
						+ "思念和依恋。远在他乡的游子，为了一家的生计，不得不走进一座他不熟悉的城市，在那里辛"
						+ "勤劳作，饱受思念之苦。也许，他并没有宏图大志，非要在异地他乡干出一番轰轰烈烈的事业；也许，他没有在这座城市安营扎寨的打算。因为在他心中，回家与父母妻儿团聚，孝尽父母，养育儿女才是他此生最大的心愿。"
				+ "乡愁，是心灵深处最美的花朵。它是一朵散发着淡淡清香的茉莉，承载着"
						+ "温柔的母爱；它是一朵金黄的向日葵，承诺着沉甸甸的父爱；它是一朵雨中的牵牛花，承载着隔辈亲人对它默"
						+ "默无闻的守候；它是一朵雨后的荷花，承载着对妻子的深情的牵挂；它是一朵阳光下的郁金香，承载着对女儿浓烈的思念；它是一朵春天里的野菊花，虽然普通，但却承载着游子对故土浓浓的思念。"
				  ;
		List<String> phraseList = HanLP.extractPhrase(text, 10);
		List<String> keyword = HanLP.extractKeyword(text, 5);
		List<String> summary = HanLP.extractSummary(text, 10);
		System.out.println(phraseList);
		System.out.println(keyword);
		System.out.println(summary);
	}
	
	@Test
	public void test3(){
		String[] wordArray = new String[]
		        {
		                "香蕉",
		                "苹果",
		                "白菜",
		                "水果",
		                "蔬菜",
		                "自行车",
		                "公交车",
		                "飞机",
		                "买",
		                "卖",
		                "购入",
		                "新年",
		                "春节",
		                "丢失",
		                "补办",
		                "办理",
		                "送给",
		                "寻找",
		                "孩子",
		                "教室",
		                "教师",
		                "会计",
		        };
		for (String a : wordArray)
		{
		    for (String b : wordArray)
		    {
		        System.out.println(a + "\t" + b + "\t之间的距离是\t" + CoreSynonymDictionary.distance(a, b));
		    }
		}
	}
	
	@Test
	public void test4(){
		Suggester suggester = new Suggester();
		String[] titleArray =
		(
		        "威廉王子发表演说 呼吁保护野生动物\n" +
		        "《时代》年度人物最终入围名单出炉 普京马云入选\n" +
		        "“黑格比”横扫菲：菲吸取“海燕”经验及早疏散\n" +
		        "日本保密法将正式生效 日媒指其损害国民知情权\n" +
		        "英报告说空气污染带来“公共健康危机”"
		).split("\\n");
		for (String title : titleArray)
		{
		    suggester.addSentence(title);
		}

		System.out.println(suggester.suggest("发言", 1));       // 语义
		System.out.println(suggester.suggest("危机公共", 1));   // 字符
		System.out.println(suggester.suggest("mayun", 1));      // 拼音
	} 
}
